#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_PageUID "SSOL_UI"


// logging function, should be "MLHook_LogMe_" + PageUID
Void MLHookLog(Text msg) {
    SendCustomEvent("MLHook_LogMe_" ^ C_PageUID, [msg]);
}

// don't care about Y coord b/c they're all the same
declare Vec2[] CP_Positions;
declare CSmPlayer ThePlayer;

declare Integer LastStartTime;
declare Integer LastCpCount;

Void UpdateNewCPs() {

}


Void SetPlayer() {
    MLHookLog("Test");
    MLHookLog("This: " ^ System);
    // if (GUIPlayer != Null) {
    //     ThePlayer <=> GUIPlayer;
    //     return;
    // }
    // foreach (Player in Players) {
    //     if (Player.User.Name == LocalUser.Name) {
    //         ThePlayer <=> Player;
    //         // MLHookLog("Found Player: " ^ Player.User.Name);
    //         break;
    //     }
    // }
}


declare Vec2 RemMapOffs;
declare Vec2 MapSize;
declare Vec2 ImgInnerSize;
declare Vec2 Scale;
declare Vec2 AddPxOffs;

Void SetConstVecs() {
    RemMapOffs = <-418., -794.>;
    MapSize = <833. - 418., 1014. - 794.>;
    ImgInnerSize = <3221. - 410., 1982. - 504.>;
    Scale = <ImgInnerSize.X / MapSize.X, ImgInnerSize.Y / MapSize.Y>; // ImgInnerSize / MapSize;
    AddPxOffs = <410., 504.>;
}

Vec2 ImageCoords(Vec2 MapCoords) {
    declare Vec2 pos = <MapCoords.Y, MapCoords.X> + RemMapOffs;
    return <pos.X * Scale.X, pos.Y * Scale.Y> + AddPxOffs;
    // return (pos + RemMapOffs) * Scale + AddPxOffs;
}


Void LoadCheckpointLocations() {
    CP_Positions = [
        <854.0, 694.0>,
        <821.0, 693.0>,
        <811.0, 678.0>,
        <805.0, 667.0>,
        <799.0, 652.0>,
        <797.0, 641.0>,
        <797.0, 630.0>,
        <797.0, 618.0>,
        <797.0, 608.0>,
        <797.0, 598.0>,
        <796.0, 587.0>,
        <796.0, 577.0>,
        <795.0, 570.0>,
        <794.0, 561.0>,
        <839.0, 573.0>,
        <851.0, 591.0>,
        <829.0, 604.0>,
        <812.0, 593.0>,
        <812.0, 629.0>,
        <828.0, 662.0>,
        <855.0, 642.0>,
        <848.0, 525.0>,
        <845.0, 534.0>,
        <854.0, 532.0>,
        <878.0, 570.0>,
        <884.0, 577.0>,
        <875.0, 579.0>,
        <937.0, 619.0>,
        <942.0, 626.0>,
        <934.0, 628.0>,
        <920.0, 638.0>,
        <904.0, 649.0>,
        <902.0, 667.0>,
        <896.0, 681.0>,
        <891.0, 695.0>,
        <887.0, 710.0>,
        <883.0, 728.0>,
        <899.0, 593.0>,
        <892.0, 606.0>,
        <896.0, 620.0>,
        <899.0, 634.0>,
        <1002.0, 418.0>,
        <983.0, 419.0>,
        <979.0, 434.0>,
        <960.0, 447.0>,
        <970.0, 445.0>,
        <963.0, 438.0>,
        <927.0, 444.0>,
        <902.0, 457.0>,
        <900.0, 465.0>,
        <909.0, 463.0>,
        <1007.0, 560.0>,
        <999.0, 573.0>,
        <989.0, 582.0>,
        <977.0, 592.0>,
        <967.0, 600.0>,
        <964.0, 610.0>,
        <964.0, 622.0>,
        <964.0, 631.0>,
        <963.0, 648.0>,
        <960.0, 666.0>,
        <951.0, 678.0>,
        <946.0, 688.0>,
        <942.0, 701.0>,
        <938.0, 714.0>,
        <913.0, 743.0>,
        <884.0, 756.0>,
        <887.0, 783.0>,
        <903.0, 794.0>,
        <926.0, 790.0>,
        <936.0, 773.0>,
        <947.0, 759.0>,
        <962.0, 750.0>,
        <966.0, 778.0>,
        <961.0, 802.0>,
        <929.0, 812.0>,
        <901.0, 833.0>,
        <876.0, 813.0>,
        <859.0, 780.0>,
        <832.0, 785.0>,
        <838.0, 754.0>,
        <860.0, 744.0>,
        <837.0, 723.0>,
        <906.127, 583.579>,
        <914.0, 569.0>,
        <921.0, 554.0>,
        <927.0, 541.0>,
        <931.0, 524.0>,
        <932.0, 509.0>,
        <972.0, 517.0>,
        <980.0, 522.0>,
        <981.0, 513.0>,
        <998.0, 498.0>,
        <1007.0, 496.0>,
        <1001.0, 489.0>,
        <980.0, 470.0>,
        <982.0, 457.0>,
        <990.0, 446.0>,
        <1007.0, 443.0>,
        <1014.0, 42.08>
    ];
}

Void InitConstants() {
    LoadCheckpointLocations();
    SetPlayer();
    SetConstVecs();
}

main() {
    InitConstants();

    while (True) {
        yield;
        UpdateNewCPs();
    }
}
